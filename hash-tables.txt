1. A hash table is a data sctructure organized in a Key-Value way. It stores values in buckets and allows keys to access it, making it easy to retreive the data.

2. Hashing is the process of converting "Keys" which is made up data, and converting it into a fixed-length "Hash Code" used to store/locate data in the Hash table

3. A hash table stores data by converting a Key to a hash code and then looking up the Array index with it, then storing the value in the array index. 

4. If your data is a static number of distinct values of different types, then an object is the optimal choice. Use a hash table when your data contains a variable number of consistently formatted values, each with an identifier. A Hash Table has a Key and A Value...whereas the Object can have a bunch of property names that determine the type of data.

5. 
- Hash Table 
- Object
- Object
- Hash Table
- Object

******* Programming Questions ********

1    ----------------------------------------------------------------------------------------------------------------------------------------

var hash = (key, buckets) => {
  var hashCode = 0;
  for (var i = 0; i < key.length; i++) {
    hashCode += key.charCodeAt(i);
  }
  return hashCode % buckets;
};


let HashTable = function (){
  
  let storage = [];
  let numberOfBuckets = 23;
  
  this.print = function(){
    console.log(storage);
  }
  
  this.add = function(customerObj){
    
    let key = customerObj.number;
    let index = hash(key, numberOfBuckets);
    if(storage[index] === undefined){
      storage[index] = customerObj;
    } else {
      while(storage[index] !== undefined){
        index++;
      }
      storage[index] = customerObj;
    }
  };
  
  this.lookup = function(newKey){
    let index = hash(newKey, numberOfBuckets);
    return storage[index];
  };
  
};


let ht = new HashTable();

var zach = {
  name: 'Zach',
  number: '111-222-3333',
  address: '61 main st'
};
var rachel = {
  name: 'Rachel',
  number: '222-333-4444',
  address: '62 main st'
};
var steve = {
  name: 'Steve',
  number: '333-444-5555',
  address: '63 main st'
};

ht.add(zach);
ht.add(rachel);
ht.add(steve);

// ht.print();

console.log(ht.lookup('333-444-5555'));
console.log(ht.lookup('111-222-3333'));
console.log(ht.lookup('222-333-4444'));


2.  ----------------------------------------------------------------------------------------------------------------------------------------

var hash = (key, buckets) => {
  var hashCode = 0;
  for (var i = 0; i < key.length; i++) {
    hashCode += key.charCodeAt(i);
  }
  return hashCode % buckets;
};


let HashTable = function (){
  
  let storage = [];
  let numberOfBuckets = 23;
  
  this.print = function(){
    console.log(storage);
  }
  
  this.add = function(itemObj){
    
    let key = itemObj.name;
    let index = hash(key, numberOfBuckets);
    if(storage[index] === undefined){
      storage[index] = itemObj;
    } else {
      while(storage[index] !== undefined){
        index++;
      }
      storage[index] = itemObj;
    }
  };
  
  this.lookup = function(newKey){
    let index = hash(newKey, numberOfBuckets);
    return storage[index];
  };
  
};


let ht = new HashTable();

var dishSoap = {
  name: 'dish soap',
  quantity: '44'
};
var hairBrush = {
  name: 'hair brush',
  quantity: '14'
};
var toothPaste = {
  name: 'tooth paste',
  quantity: 23
};


ht.add(dishSoap);
ht.add(hairBrush);
ht.add(toothPaste);

ht.print();

console.log(ht.lookup('dish soap'));
console.log(ht.lookup('hair brush'));
console.log(ht.lookup('tooth paste'));


3.  ----------------------------------------------------------------------------------------------------------------------------------------

var hash = (key, buckets) => {
  var hashCode = 0;
  for (var i = 0; i < key.length; i++) {
    hashCode += key.charCodeAt(i);
  }
  return hashCode % buckets;
};


let HashTable = function (){
  
  let storage = [];
  let numberOfBuckets = 23;
  
  this.print = function(){
    console.log(storage);
  }
  
  this.add = function(articleObj){
    
    let key = (articleObj.publisher + ', ' + articleObj.date)
    let index = hash(key, numberOfBuckets);
    if(storage[index] === undefined){
      storage[index] = articleObj;
    } else {
      while(storage[index] !== undefined){
        index++;
      }
      storage[index] = articleObj;
    }
  };
  
  this.lookup = function(keyObj){
    let index = hash(keyObj, numberOfBuckets);
    return storage[index];
  };
  
};


let ht = new HashTable();

var NewYorker = {
  publisher: 'LV Review Journal',
  date: '09-25-1993',
  paper: 'Heavy Traffic due to major road work'
};
var WallStreetJournal = {
  publisher: 'WS Journal Review',
  date: '07-25-2004',
  paper: 'Tiger Wins The Masters!!'
};


ht.add(NewYorker);
ht.add(WallStreetJournal);

// ht.print();

console.log(ht.lookup('LV Review Journal, 09-25-1993'));
console.log(ht.lookup('WS Journal Review, 07-25-2004'));






